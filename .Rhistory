test = all_posts[!all_posts$train==1,] %>% select(-train)
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
###Dataset with topic models;
test_tpc10 = test %>%
left_join(tpc10, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 -1,
data=.)
test_tpc30 = test %>%
left_join(tpc30, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 +
topic11 + topic12 + topic13 + topic14 + topic15 + topic16 + topic17 + topic18 + topic19 +
topic20 + topic21 + topic22 + topic23 + topic24 + topic25 + topic26 + topic27 + topic28 +
topic29 + topic30-1,
data=.)
###Scaled
fit1 = readRDS('./03.analysis/models/scaled_ols_flags.rds')
real = test %>% select(likes, likes_scaled)
fit1 = readRDS('./03.analysis/models/scaled_ols_flags.rds')
real = test %>% select(likes, likes_scaled)
real$pred = predict(fit1,test)
all_posts = all_posts %>%
group_by(user) %>%
summarize_at(.vars=c(likes),.funs = c(mean, stderr))
all_posts = all_posts %>%
group_by(user) %>%
summarize_at(.vars=c('likes'),.funs = c(mean, stderr))
std_likes = stderr(likes)
std_likes = sd(likes)
all_posts = all_posts %>%
group_by(user) %>%
summarize(mean_likes = mean(likes),
std_likes = sd(likes))
all_posts = all_posts %>%
group_by(user) %>%
summarize_at(vars(likes),funs(mean,sd))
library(tidyverse)
library(caret)
library(doParallel)
library(rpart.plot)
all_posts = readRDS('./02.data.cleaning/all_posts_clean.rds')
posts_m = readRDS("./02.data.cleaning/word_matrix.rds")
emoji_m = readRDS('./02.data.cleaning/emoji_matrix.rds')
hash_m = readRDS('./02.data.cleaning/hashtag_matrix.rds')
ats_m = readRDS('./02.data.cleaning/ats_matrix.rds')
alt_m = readRDS('./02.data.cleaning/alt_matrix.rds')
tpc10 = readRDS('./02.data.cleaning/topics10.rds')
tpc30 = readRDS('./02.data.cleaning/topics30.rds')
all_posts$likes_scaled = as.numeric(all_posts$likes_scaled)
all_posts$period = 'Early'
all_posts$period[as.numeric(all_posts$hour) > 6] = 'Morning'
all_posts$period[as.numeric(all_posts$hour) > 12] = 'Midday'
all_posts$period[as.numeric(all_posts$hour) > 18] = 'Evening'
all_posts$period= as.factor(all_posts$period)
all_posts = all_posts %>%
group_by(user) %>%
summarize_at(vars(likes),funs(mean,sd))
##drop unecessary vars
library(tidyverse)
library(caret)
library(doParallel)
library(rpart.plot)
all_posts = readRDS('./02.data.cleaning/all_posts_clean.rds')
posts_m = readRDS("./02.data.cleaning/word_matrix.rds")
emoji_m = readRDS('./02.data.cleaning/emoji_matrix.rds')
hash_m = readRDS('./02.data.cleaning/hashtag_matrix.rds')
ats_m = readRDS('./02.data.cleaning/ats_matrix.rds')
alt_m = readRDS('./02.data.cleaning/alt_matrix.rds')
tpc10 = readRDS('./02.data.cleaning/topics10.rds')
tpc30 = readRDS('./02.data.cleaning/topics30.rds')
all_posts$likes_scaled = as.numeric(all_posts$likes_scaled)
all_posts$period = 'Early'
all_posts$period[as.numeric(all_posts$hour) > 6] = 'Morning'
all_posts$period[as.numeric(all_posts$hour) > 12] = 'Midday'
all_posts$period[as.numeric(all_posts$hour) > 18] = 'Evening'
all_posts$period= as.factor(all_posts$period)
all_posts = all_posts %>%
group_by(user) %>%
mutate(mean_likes = mean(likes),
std_likes = sd(likes))
View(all_posts)
library(tidyverse)
library(caret)
library(doParallel)
library(rpart.plot)
all_posts = readRDS('./02.data.cleaning/all_posts_clean.rds')
posts_m = readRDS("./02.data.cleaning/word_matrix.rds")
emoji_m = readRDS('./02.data.cleaning/emoji_matrix.rds')
hash_m = readRDS('./02.data.cleaning/hashtag_matrix.rds')
ats_m = readRDS('./02.data.cleaning/ats_matrix.rds')
alt_m = readRDS('./02.data.cleaning/alt_matrix.rds')
tpc10 = readRDS('./02.data.cleaning/topics10.rds')
tpc30 = readRDS('./02.data.cleaning/topics30.rds')
all_posts$likes_scaled = as.numeric(all_posts$likes_scaled)
all_posts$period = 'Early'
all_posts$period[as.numeric(all_posts$hour) > 6] = 'Morning'
all_posts$period[as.numeric(all_posts$hour) > 12] = 'Midday'
all_posts$period[as.numeric(all_posts$hour) > 18] = 'Evening'
all_posts$period= as.factor(all_posts$period)
all_posts = all_posts %>%
group_by(user) %>%
mutate(mean_likes = mean(likes),
std_likes = sd(likes)) %>%
ungroup()
##drop unecessary vars
all_posts = all_posts %>%
select(-c(alt, desc, post_ct, scrapedate, date, mentions, hashtags, emoji,
emoji_text, days))
##create flags
all_posts = all_posts %>%
mutate(hash_flag = hash_ct>0,
mention_flag = mention_ct>0,
emoji_flag = emoji_ct>0)
train = all_posts[all_posts$train==1,] %>% select(-train)
test = all_posts[!all_posts$train==1,] %>% select(-train)
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
###Dataset with topic models;
test_tpc10 = test %>%
left_join(tpc10, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 -1,
data=.)
test_tpc30 = test %>%
left_join(tpc30, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 +
topic11 + topic12 + topic13 + topic14 + topic15 + topic16 + topic17 + topic18 + topic19 +
topic20 + topic21 + topic22 + topic23 + topic24 + topic25 + topic26 + topic27 + topic28 +
topic29 + topic30-1,
data=.)
View(all_posts)
fit1 = readRDS('./03.analysis/models/scaled_ols_flags.rds')
real = test %>% select(likes, likes_scaled, mean_likes,std_likes)
real$pred_scaled = predict(fit1,test)
real$pred_likes = real$pred_scaled*real$std_likes + real$mean_likes
postResample(pred=real$pred_scaled,
obs=real$likes_scaled)
oos_rmse = postResample(pred=real$pred_scaled,
obs=real$likes_scaled)
oos_rmse = postResample(pred=real$pred_scaled,
obs=real$likes_scaled)[1]
oos_rmse_likes = postResample(pred=real$pred_likes,
obs=real$likes)[1]
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
real = test %>% select(likes, likes_scaled, mean_likes,std_likes)
real$pred_scaled = predict(fit1,test_all)
real$pred_likes = real$pred_scaled*real$std_likes + real$mean_likes
oos_rmse = postResample(pred=real$pred_scaled,
obs=real$likes_scaled)[1]
oos_rmse_likes = postResample(pred=real$pred_likes,
obs=real$likes)[1]
hist(test$likes)
hist(test$likes)
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse = function(mdl,x,y){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[1]
}
test_rmse(fit1,test,test$likes_scaled)
test_rmse(fit1,test_all,test$likes_scaled)
test_rmse = function(mdl,x,y){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[1]
return(oos_rmse)
}
test_rmse(fit1,test_all,test$likes_scaled)
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[1]
print(paste(desc),oos_rmse)
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[1]
print(paste(desc),oos_rmse[1])
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[1]
print(paste(desc,oos_rmse))
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse))
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = TRUE))
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
mdl
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
print(mdl)
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
print(mdl$bestTune)
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/scaled_xgboost_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost All Vars')
fit1 = readRDS('./03.analysis/models/scaled_xgboost_tpc10.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled XGBoost 10 topics')
test_rmse(fit1,test_tpc10,test$likes_scaled,'Scaled XGBoost 10 topics')
fit1 = readRDS('./03.analysis/models/scaled_xgboost_tpc30.rds')
test_rmse(fit1,test_tpc30,test$likes_scaled,'Scaled XGBoost 30 topics')
fit1 = readRDS('./03.analysis/models/scaled_ranger_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled ranger all vars')
fit1 = readRDS('./03.analysis/models/scaled_ols_flags.rds')
test_rmse(fit1,test,test$likes_scaled,'Scaled ranger all vars')
fit1 = readRDS('./03.analysis/models/simple_scaled_ols_flags.rds')
test_rmse(fit1,test,test$likes,'OLS flagged variables')
fit1 = readRDS('./03.analysis/models/ranger_all.rds')
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~ followers + isMulti + weekday + period + hash_ct + mention_ct + emoji_ct -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
fit1 = readRDS('./03.analysis/models/ranger_all.rds')
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
fit1 = readRDS('./03.analysis/models/xgboost_all.rds')
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
fit1
fit1 = readRDS('./03.analysis/models/ranger_all.rds')
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
fit1
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~  isMulti + weekday + period + hash_ct + mention_ct + emoji_ct + followers -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
predict(fit1,test_all)
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes ~  isMulti + weekday + period + hash_ct + mention_ct + emoji_ct + followers -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~  isMulti + weekday + period + hash_ct + mention_ct + emoji_ct + followers -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
fit1
predict(fit1,test_all)
predict(fit1$finalModel,test_all)
predict(fit1,newdata=test_all)
predict(fit1,data=test_all)
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,data=x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
print(mdl$bestTune)
return(oos_rmse)
}
test_rmse = function(mdl,x,y,desc){
pred = predict(mdl,x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
print(mdl$bestTune)
return(oos_rmse)
}
test_rmse2 = function(mdl,x,y,desc){
pred = predict(mdl,data=x)
oos_rmse = postResample(pred=pred,
obs=y)[[1]]
print(paste(desc,oos_rmse, collapse = ": "))
print(mdl$bestTune)
return(oos_rmse)
}
fit1 = readRDS('./03.analysis/models/ranger_all.rds')
test_rmse2(fit1,test_all,test$likes,'OLS flagged variables')
pred = predict(mdl,data=x)
pred = predict(fit1,data=test_all)
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes_scaled ~  isMulti + weekday + period + hash_ct + mention_ct + emoji_ct + followers -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
pred = predict(fit1,data=test_all)
fit1 = readRDS('./03.analysis/models/scaled_ranger_all.rds')
fit1
fit1 = readRDS('./03.analysis/models/scaled_ranger_all.rds')
test_rmse(fit1,test_all,test$likes_scaled,'Scaled ranger all vars')
library(tidyverse)
library(caret)
library(doParallel)
library(rpart.plot)
all_posts = readRDS('./02.data.cleaning/all_posts_clean.rds')
posts_m = readRDS("./02.data.cleaning/word_matrix.rds")
emoji_m = readRDS('./02.data.cleaning/emoji_matrix.rds')
hash_m = readRDS('./02.data.cleaning/hashtag_matrix.rds')
ats_m = readRDS('./02.data.cleaning/ats_matrix.rds')
alt_m = readRDS('./02.data.cleaning/alt_matrix.rds')
tpc10 = readRDS('./02.data.cleaning/topics10.rds')
tpc30 = readRDS('./02.data.cleaning/topics30.rds')
all_posts$likes_scaled = as.numeric(all_posts$likes_scaled)
all_posts$period = 'Early'
all_posts$period[as.numeric(all_posts$hour) > 6] = 'Morning'
all_posts$period[as.numeric(all_posts$hour) > 12] = 'Midday'
all_posts$period[as.numeric(all_posts$hour) > 18] = 'Evening'
all_posts$period= as.factor(all_posts$period)
##drop unecessary vars
all_posts = all_posts %>%
select(-c(alt, desc, post_ct, scrapedate, date, mentions, hashtags, emoji,
emoji_text, days))
##create flags
all_posts = all_posts %>%
mutate(hash_flag = hash_ct>0,
mention_flag = mention_ct>0,
emoji_flag = emoji_ct>0)
train = all_posts[all_posts$train==1,] %>% select(-train)
test = all_posts[!all_posts$train==1,] %>% select(-train)
###tuning plot function
tuneplot <- function(x, probs = .90) {
ggplot(x) +
coord_cartesian(ylim = c(quantile(x$results$RMSE, probs = probs), min(x$results$RMSE))) +
theme_bw()
}
fitControl <- trainControl(## 5-fold CV
method = "cv",
number = 4,
returnResamp = "final")
#cl <- makePSOCKcluster(10)
#registerDoParallel(cl)
###Linear fit with flags
# fit2 <- train(likes_scaled ~ isMulti + weekday + period + hash_flag +
#                 mention_flag + emoji_flag,
#               data=train,
#               method = 'lm',
#               trControl = fitControl)
# saveRDS(fit2, file='./03.analysis/models/scaled_ols_flags.rds')
#
# fit2 = readRDS('./03.analysis/models/scaled_ols_flags.rds')
###Full dataset with all word matrices
train_all = cbind(model.matrix(likes ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct+followers -1 ,
data=train),
as.matrix(hash_m[all_posts$train==1,]),
as.matrix(ats_m[all_posts$train==1,]),
as.matrix(alt_m[all_posts$train==1,]),
as.matrix(posts_m[all_posts$train==1,]))
###Full dataset with all word matrices
test_all = cbind(model.matrix(likes ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct+followers -1 ,
data=test),
as.matrix(hash_m[all_posts$train==0,]),
as.matrix(ats_m[all_posts$train==0,]),
as.matrix(alt_m[all_posts$train==0,]),
as.matrix(posts_m[all_posts$train==0,]))
###Dataset with topic models;
train_tpc10 = train %>%
left_join(tpc10, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 -1,
data=.)
train_tpc30 = train %>%
left_join(tpc30, by='url') %>%
replace(is.na(.),0) %>%
model.matrix(likes_scaled ~ isMulti + weekday + period + hash_ct + mention_ct + emoji_ct +
topic1 + topic2 + topic3 + topic4 + topic5 + topic6 + topic7 + topic8 + topic9 + topic10 +
topic11 + topic12 + topic13 + topic14 + topic15 + topic16 + topic17 + topic18 + topic19 +
topic20 + topic21 + topic22 + topic23 + topic24 + topic25 + topic26 + topic27 + topic28 +
topic29 + topic30-1,
data=.)
###2000 obs sample for tuning
samp2000 = sample(nrow(train_all), 2000)
subtrain = train_all[samp2000,]
set.seed(1)
rnggrid = expand.grid(
mtry=c(500),
splitrule = c('variance'),
min.node.size = c(5))
fit_basic <- train(y=train$likes,
x=train_all,
method = 'ranger',
importance='impurity',
tuneGrid=rnggrid,
trControl = fitControl)
saveRDS(fit_basic, file='./03.analysis/models/ranger_all.rds')
fit1 = readRDS('./03.analysis/models/ranger_all.rds')
test_rmse(fit1,test_all,test$likes,'OLS flagged variables')
##The final values used for the model were nrounds = 250, max_depth = 10, eta = 0.01, gamma = 0, colsample_bytree = 0.8, min_child_weight = 6 and subsample = 0.8.
xgbgrid = expand.grid(nrounds=850,
eta = c(0.01),
max_depth = c(10),
colsample_bytree = .8,
min_child_weight = c(1),
subsample=.8,
gamma=0)
set.seed(1)
fit5 <- train(y=train$likes,
x=train_all,
method = 'xgbTree',
verbose=TRUE,
tuneGrid=xgbgrid,
trControl = fitControl)
saveRDS(fit5, file='./03.analysis/models/xgboost_all.rds')
fit2 <- train(likes_scaled ~ followers + user + isMulti + weekday + period + hash_flag +
mention_flag + emoji_flag,
data=train,
method = 'lm',
trControl = fitControl)
test_rmse(fit2,test_all,test$likes,'OLS flagged variables')
test_rmse(fit2,test,test$likes,'OLS flagged variables')
summary(fit2$finalModel)
fit2 <- train(likes ~ followers + user + isMulti + weekday + period + hash_flag +
mention_flag + emoji_flag,
data=train,
method = 'lm',
trControl = fitControl)
test_rmse(fit2,test,test$likes,'OLS flagged variables')
fit1 = readRDS('./03.analysis/models/xgboost_all.rds')
test_rmse(fit1,test_all,test$likes,'xgboost followers')
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
fit3 = train(y=train$likes/train$followers,
x=train_all,
method='rpart',
tuneLength=15,
trControl = fitControl)
registerDoSEQ()
stopCluster(cl)
pred = predict(fit3,test)*test$followers
postResample(pred=pred,
obs=test$likes/test$followers)[[1]]
pred = predict(fit3,test_all)*test$followers
postResample(pred=pred,
obs=test$likes/test$followers)[[1]]
postResample(pred=pred,
obs=test$likes)[[1]]
